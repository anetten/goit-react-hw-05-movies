{"version":3,"file":"static/js/7.108670e8.chunk.js","mappings":"6NAsEA,UAlEoB,WAClB,IAAAA,GAA0CC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9BG,GAAWC,EAAAA,EAAAA,MAEXC,EAAQJ,EAAaK,IAAI,UAC/BC,GAAoCd,EAAAA,EAAAA,UAAc,OAALY,QAAK,IAALA,EAAAA,EAAS,IAAGG,GAAAb,EAAAA,EAAAA,GAAAY,EAAA,GAAlDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BG,GAAeC,EAAAA,EAAAA,cAAWC,EAAAA,EAAAA,GAAAC,IAAAA,MAAC,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEEC,EAAAA,EAAAA,IAAgBX,GAAY,KAAD,EAApDO,EAAgBC,EAAAI,KACtBxB,EAAiBmB,GAAkBC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEnCM,QAAQC,MAAM,iCAAgCP,EAAAK,IAAS,QAGzDpB,EAAgB,CACduB,OAAQhB,IACP,yBAAAQ,EAAAS,OAAA,GAAAX,EAAA,kBACF,CAACN,EAAYP,IAchB,OAPAyB,EAAAA,EAAAA,YAAU,WACJtB,GAEFM,GAEJ,GAAG,CAACN,EAAOM,KAGTiB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJD,EAAAA,EAAAA,MAAA,QAAMG,SAfW,SAAAC,GACnBA,EAAEC,iBACFtB,GACF,EAYiCkB,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SACEI,KAAK,OACLC,aAAc9B,EACd+B,SAAU,SAAAJ,GAAC,OAAItB,EAAcsB,EAAEK,OAAOC,MAAM,EAC5CC,UAAQ,KAEVT,EAAAA,EAAAA,KAAA,UAAQI,KAAK,SAASM,QAAS7B,EAAakB,SAAC,cAK9CjC,GACCkC,EAAAA,EAAAA,KAAA,MAAAD,SACGjC,EAAc6C,QAAQC,KAAI,SAAAC,GAAK,OAC9Bb,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACC,MAAO,CAAEC,KAAM3C,GAAY4C,GAAE,WAAAC,OAAaL,EAAMM,IAAKpB,SACxDc,EAAMO,SAFFP,EAAMM,GAIV,OAITnB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6BAIX,C","sources":["components/pages/Movies.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { getsearchMovies } from 'movieAPI';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nconst SearchMovie = () => {\n  const [searchResults, setSearchResults] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const location = useLocation();\n\n  const query = searchParams.get('sQuery');\n  const [searchTerm, setSearchTerm] = useState(query ?? '');\n\n  const handleSearch = useCallback(async () => {\n    try {\n      const searchResultData = await getsearchMovies(searchTerm);\n      setSearchResults(searchResultData);\n    } catch (error) {\n      console.error('Error fetching search results:', error);\n    }\n\n    setSearchParams({\n      sQuery: searchTerm,\n    });\n  }, [searchTerm, setSearchParams]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleSearch();\n  };\n\n  useEffect(() => {\n    if (query) {\n      // setSearchTerm(query);\n      handleSearch();\n    }\n  }, [query, handleSearch]);\n\n  return (\n    <div>\n      <h3>Search Movies</h3>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          defaultValue={query}\n          onChange={e => setSearchTerm(e.target.value)}\n          required\n        />\n        <button type=\"submit\" onClick={handleSearch}>\n          Search\n        </button>\n      </form>\n\n      {searchResults ? (\n        <ul>\n          {searchResults.results.map(movie => (\n            <li key={movie.id}>\n              <Link state={{ from: location }} to={`/movies/${movie.id}`}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No search results yet.</p>\n      )}\n    </div>\n  );\n};\n\nexport default SearchMovie;\n"],"names":["_useState","useState","_useState2","_slicedToArray","searchResults","setSearchResults","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","location","useLocation","query","get","_useState3","_useState4","searchTerm","setSearchTerm","handleSearch","useCallback","_asyncToGenerator","_regeneratorRuntime","_callee","searchResultData","_context","prev","next","getsearchMovies","sent","t0","console","error","sQuery","stop","useEffect","_jsxs","children","_jsx","onSubmit","e","preventDefault","type","defaultValue","onChange","target","value","required","onClick","results","map","movie","Link","state","from","to","concat","id","title"],"sourceRoot":""}
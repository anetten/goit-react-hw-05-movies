{"version":3,"file":"static/js/527.e36ecd89.chunk.js","mappings":"sPACA,EAA4B,wBAA5B,EAAgE,wBAAhE,EAAmG,uBAAnG,EAAsI,wBAAtI,EAA0K,wB,SCgD1K,EA5Ca,WACX,IAAAA,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACZI,GAAWC,EAAAA,EAAAA,IAAU,MAArBD,OAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEAC,EAAAA,EAAAA,IAAgBZ,GAAQ,KAAD,EAAvCQ,EAAOC,EAAAI,KACbd,EAAQS,EAAQV,MAAMW,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEtBM,QAAQC,MAAM,gCAA+BP,EAAAK,IAAS,yBAAAL,EAAAQ,OAAA,GAAAV,EAAA,kBAEzD,kBAPsB,OAAAH,EAAAc,MAAA,KAAAC,UAAA,KASnBnB,GACFG,GAEJ,GAAG,CAACH,IAECA,GAKHoB,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,MAAIE,UAAWC,EAAcF,SAC1BvB,EAAK0B,KAAI,SAAAC,GAAM,OACdC,EAAAA,EAAAA,MAAA,MAAIJ,UAAWC,EAAcF,SAAA,EAC3BD,EAAAA,EAAAA,KAAA,OACEE,UAAWC,EACXI,IAAG,kCAAAC,OACDH,EAAOI,cAAgB,2BAEzBC,IAAKL,EAAOM,QAEdX,EAAAA,EAAAA,KAAA,KAAGE,UAAWC,EAAcF,SAAEI,EAAOM,QACrCL,EAAAA,EAAAA,MAAA,KAAGJ,UAAWC,EAAcF,SAAA,CAAC,cAAYI,EAAOO,eATfP,EAAOQ,GAUrC,SAjBJb,EAAAA,EAAAA,KAAA,OAAAC,SAAK,iCAsBhB,C","sources":["webpack://react-homework-template/./src/pages/Cast.module.css?8b09","pages/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast_list\":\"Cast_cast_list__BS2eY\",\"cast_item\":\"Cast_cast_item__FqpGN\",\"cast_img\":\"Cast_cast_img__798w6\",\"cast_name\":\"Cast_cast_name__TdSp2\",\"cast_char\":\"Cast_cast_char__4lKRo\"};","import React, { useEffect, useState } from 'react';\nimport { getMovieCredits } from 'movieAPI';\nimport { useParams } from 'react-router-dom';\nimport css from './Cast.module.css';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { postId } = useParams(null);\n\n  useEffect(() => {\n    const fetchMovieCredits = async () => {\n      try {\n        const credits = await getMovieCredits(postId);\n        setCast(credits.cast);\n      } catch (error) {\n        console.error('Error fetching movie credits:', error);\n      }\n    };\n\n    if (postId) {\n      fetchMovieCredits();\n    }\n  }, [postId]);\n\n  if (!postId) {\n    return <div>No cast information available</div>;\n  }\n\n  return (\n    <div>\n      <ul className={css.cast_list}>\n        {cast.map(member => (\n          <li className={css.cast_item} key={member.id}>\n            <img\n              className={css.cast_img}\n              src={`https://image.tmdb.org/t/p/w200${\n                member.profile_path || '/no_image_available.jpg'\n              }`}\n              alt={member.name}\n            />\n            <p className={css.cast_name}>{member.name}</p>\n            <p className={css.cast_char}>Character: {member.character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["_useState","useState","_useState2","_slicedToArray","cast","setCast","postId","useParams","useEffect","fetchMovieCredits","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","credits","_context","prev","next","getMovieCredits","sent","t0","console","error","stop","apply","arguments","_jsx","children","className","css","map","member","_jsxs","src","concat","profile_path","alt","name","character","id"],"sourceRoot":""}